<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>

  <meta charset="UTF-8" />
  <title>Page de Test pour les Services</title>

  <meta name="viewport" content="width=device-width, initial-scale=1.0" />

  <link href="styles/reset.css" type="text/css" rel="stylesheet" />
  <link href="styles/main.css" type="text/css" rel="stylesheet" />

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>

  <script>
    
    let serverPath = 'http://localhost:8080';
    let appName = '/rest-example';
    let serviceCommonPath = '/service';
    let servicePathGroups = { token : '/token', utilisateur : '/utilisateur',
      musique : '/musique', listeLecture : '/listeLecture' };
    
    window.onload = function onload() {
      // Loads the placeholder
      let placeholder = document.getElementById('servicesTesterPlaceholder');
      
      // listeLecture
      createServiceTester(placeholder, 'DELETE', '??', 'effacer',
        servicePathGroups.token, true, [ 'ID de liste:idPlaylist' ]);

      createServiceTester(placeholder, 'POST', 'U4', 'getPrivatePlaylist',
        servicePathGroups.listeLecture, true, [ 'ID de liste:idPlaylist' ]);

      createServiceTester(placeholder, 'POST', 'P2', 'getPublicPlaylist',
        servicePathGroups.listeLecture, true, [ 'ID de liste:idPlaylist' ]);

      createServiceTester(placeholder, 'POST', 'P2', 'getPublicPlaylistList',
        servicePathGroups.listeLecture, true, [ 'Premier:premier', 'Dernier:dernier' ]);

      createServiceTester(placeholder, 'POST', 'U5', 'modify',
        servicePathGroups.listeLecture, true, [ 'ID de liste:idPlaylist', 'Nouveau nom:name',
        'Public?:public', 'Active?:active' ]);

      createServiceTester(placeholder, 'POST', 'U6', 'setPlaylistActive',
        servicePathGroups.listeLecture, true, [ 'ID de liste:idPlaylist', 'Active?:active' ]);

      createServiceTester(placeholder, 'POST', 'U5.1', 'setPlaylistName',
        servicePathGroups.listeLecture, true, [ 'ID de liste:idPlaylist', 'Nouveau nom:name' ]);

      createServiceTester(placeholder, 'POST', 'U7', 'setPlaylistPublic',
        servicePathGroups.listeLecture, true, [ 'ID de liste:idPlaylist', 'Public?:public' ]);

      createServiceTester(placeholder, 'PUT', 'U3', 'createPlaylist',
        servicePathGroups.listeLecture, true, [ 'Nom de liste:name', 'Publique?:isPublic', 'Active?:isActive' ]);
      
      // musique
      createServiceTester(placeholder, 'PUT', 'U8', 'createSong',
        servicePathGroups.musique, true, [ 'Titre:title', 'Artiste:artiste', 'Musique:musique',
        'Couverture:coverArt', 'Public?:public', 'Active?:active' ]);

      createServiceTester(placeholder, 'POST', 'U9-U10', 'getPrivateSong',
        servicePathGroups.musique, true, [ 'ID de chanson:idSong' ]);

      createServiceTester(placeholder, 'PUT', 'P3-P4', 'getPublicSong',
        servicePathGroups.musique, true, [ 'ID de chanson:idSong' ]);

      createServiceTester(placeholder, 'PUT', 'U11', 'modify',
        servicePathGroups.musique, true, [ 'ID de chanson:idSong', 'Titre:titre', 'Artiste:artiste',
        'Vignette:vignette', 'Publique?:publique', 'Active?:active' ]);

       createServiceTester(placeholder, 'POST', 'U12', 'setActive',
        servicePathGroups.musique, true, [ 'ID de chanson:idSong', 'Active?:active' ]);

      createServiceTester(placeholder, 'POST', 'U13', 'setPublic',
        servicePathGroups.musique, true, [ 'ID de chanson:idSong', 'Publique?:publique' ]);

      // token
      createServiceTester(placeholder, 'PUT', 'A1', 'getActionToken',
        servicePathGroups.token, false, [ 'Courriel:courriel' ]);

      // utilisateur
      createServiceTester(placeholder, 'DELETE', 'A2', 'effacer',
        servicePathGroups.utilisateur, true, [ 'ID de l\'utilisateur:idUser' ]);

      createServiceTester(placeholder, 'POST', 'U1', 'modify',
        servicePathGroups.utilisateur, true, [ 'Courriel:courriel', 'Mot de passe:motDePasse', 'Alias:alias',
        'Avatar:avatar' ]);
      
      createServiceTester(placeholder, 'PUT', 'U2', 'confirmCreateUser',
        servicePathGroups.utilisateur, true, [ 'Captcha:captcha' ]);

      createServiceTester(placeholder, 'PUT', 'P1', 'createUser',
        servicePathGroups.utilisateur, false, [ 'Alias:alias', 'Mot de passe:motDePasse', 'Courriel:courriel',
        'Avatar:avatar' ]);

      createServiceTester(placeholder, 'PUT', 'A2', 'login',
        servicePathGroups.utilisateur, false, [ 'Courriel:courriel', 'Mot de Passe:motDePasse' ]);

      createServiceTester(placeholder, 'PUT', 'A3', 'logoff',
        servicePathGroups.utilisateur, true, null);

      /*createServiceTester(placeholder, 'POST', '??', 'getMyPlaylists',
        servicePathGroups.utilisateur, true, null);

      createServiceTester(placeholder, 'PUT', 'U14', 'addSongToPlaylist',
        servicePathGroups.musique, true, [ 'ID de liste:idPlaylist', 'ID de chanson:idSong' ]);

      createServiceTester(placeholder, 'PUT', 'U15', 'removeSongToPlaylist',
        servicePathGroups.musique, true, [ 'ID de liste:idPlaylist', 'ID de chanson:idSong' ]);*/
    }
    
    /// <summary>
    /// Creates a <section> tag containing everything to test a service and puts it in the specified placeholder <div>
    ///
    /// Author: Michel Bussiere
    /// </summary>
    /// <param name="placeholder">The placeholder in which the element will be placed in</param>
    /// <param name="title">The code that identifies the service</param>
    /// <param name="serviceName">The name of the service</param>
    function createServiceTester(placeholder, serviceType, code, serviceName, servicePathGroup, useToken, parameters) {
      let service = new Object();
      service.type = serviceType;
      service.name = serviceName;
      service.pathGroup = servicePathGroup;
      service.useToken = useToken;
      service.parameters = parameters;
      
      if (typeof placeholder === 'string')
        placeholder = document.getElementById(placeholder);

      let sectionService = document.createElement('section');
      placeholder.appendChild(sectionService);
      
      let h2Title = document.createElement('h2');
      h2Title.style = 'width: 100%';
      h2Title.innerHTML = code + ' - ' + serviceName;
      sectionService.appendChild(h2Title);

      // Token
      let divToken = document.createElement('div');
      divToken.className = 'service-panel';
      sectionService.appendChild(divToken);
      
      let h3Token = document.createElement('h3');
      h3Token.innerHTML = 'Token';
      divToken.appendChild(h3Token);

      let divTokenInfo = document.createElement('div');
      divTokenInfo.id = service.PathGroup + '_' + serviceName + '_TokenInfo';
      divTokenInfo.className = 'data-display';
      divToken.appendChild(divTokenInfo);
      
      // Service Inputs
      let divServiceInputs = document.createElement('div');
      divServiceInputs.className = 'service-panel';
      sectionService.appendChild(divServiceInputs);

      let h3Service = document.createElement('h3');
      h3Service.innerHTML = 'Service';
      divServiceInputs.appendChild(h3Service);

      if (parameters != null ? parameters.length > 0 : false) {
        let lblTextAndParamName;
        
        let divLblInput;
        let lblParam
        let inputParam;

        for (let i = 0; i < parameters.length; i++) {
          lblTextAndParamName = parameters[i].split(':');
          
          divLblInput = document.createElement('div');
          divLblInput.className = 'lbl-input';

          lblParam = document.createElement('label');
          lblParam.setAttribute('for', lblTextAndParamName[1]);
          lblParam.innerHTML = lblTextAndParamName[0] + ' :';
          divLblInput.appendChild(lblParam);
          
          inputParam = document.createElement('input');
          inputParam.type = 'text';
          inputParam.id = servicePathGroup + '_' + serviceName + '_' + lblTextAndParamName[1];
          inputParam.placeholder = lblTextAndParamName[0];
          divLblInput.appendChild(inputParam);

          divServiceInputs.appendChild(divLblInput);
        }
      } else {
        divText = document.createElement('div');
        divText.innerHTML = 'Aucun paramètre d\'entré';
        divServiceInputs.appendChild(divText);
      }
      
      let divButtonGroup = document.createElement('div');
      divButtonGroup.className = 'button-group';
      divServiceInputs.appendChild(divButtonGroup);
      
      let btnPreviewQuerry = document.createElement('input');
      btnPreviewQuerry.type = 'button';
      btnPreviewQuerry.id = servicePathGroup + '_' + serviceName + '_previewQuerry';
      btnPreviewQuerry.value = 'Aperçu';
      btnPreviewQuerry.onclick = function() { previewQuerry(service); };
      divButtonGroup.appendChild(btnPreviewQuerry);
      
      let btnSubmitQuerry = document.createElement('input');
      btnSubmitQuerry.type = 'button';
      btnSubmitQuerry.id = servicePathGroup + '_' + serviceName + '_submitQuerry';
      btnSubmitQuerry.value = 'Envoyer';
      btnSubmitQuerry.onclick = function() { submitQuerry(service); };
      divButtonGroup.appendChild(btnSubmitQuerry);

      let h3Querry = document.createElement('h3');
      h3Querry.innerHTML = 'Requête';
      divServiceInputs.appendChild(h3Querry);

      let divPreviewQuerryResult = document.createElement('div');
      divPreviewQuerryResult.id = servicePathGroup + '_' + serviceName + '_previewQuerryResult';
      divPreviewQuerryResult.className = 'data-display';
      divServiceInputs.appendChild(divPreviewQuerryResult);

      // Results
      let divResults = document.createElement('div');
      divResults.className = 'service-panel';
      sectionService.appendChild(divResults);
      
      let h3Results = document.createElement('h3');
      h3Results.innerHTML = 'Résultats';
      divResults.appendChild(h3Results);

      let divSubmitQuerryResult = document.createElement('div');
      divSubmitQuerryResult.id = servicePathGroup + '_' + serviceName + '_submitQuerryResult';
      divSubmitQuerryResult.className = 'data-display';
      divResults.appendChild(divSubmitQuerryResult);
    }

    function buildQuerry(service) {
      let servicePathWithParam = serverPath + appName + serviceCommonPath + service.pathGroup
        + '/' + service.name;

      let idToken = 'IDTOKEN';
      let cle = 'CLE';

      if (service.useToken)
        servicePathWithParam += '?idToken=' + idToken + '&cle=' + cle;
      else
        servicePathWithParam += '?';

      for (let i = 0; i < (service.parameters != null ? service.parameters.length : 0); i++) {
        if (i != 0 || service.useToken)
          servicePathWithParam += '&';

        let lblTextAndParamName = service.parameters[i].split(':');
        
        inputParam =
          document.getElementById(service.pathGroup + '_' + service.name + '_' + lblTextAndParamName[1]);

        servicePathWithParam += lblTextAndParamName[1] + '='
            + (inputParam.value != '' ? inputParam.value : lblTextAndParamName[1].toUpperCase());
      }

      return servicePathWithParam;
    }
    
    function previewQuerry(service) {
      servicePathWithParam = buildQuerry(service);
      
      divResult = document.getElementById(service.pathGroup + '_' + service.name + '_previewQuerryResult');
      divResult.innerHTML = servicePathWithParam;
  
      divResult.className =
          divResult.className.replace(new RegExp('(?:^|\\s)'+ 'no-display' + '(?:\\s|$)'), ' ');
    }

    function submitQuerry(service) {
      servicePathWithParam = buildQuerry(service);

      //$('#' + service.PathGroup + '_' + serviceName + '_submitQuerryResult').load(servicePathWithParam);

      $.ajax({
        url: servicePathWithParam,
        type: service.type,
        success: function(response) {
          document.getElementById(service.pathGroup + '_' + service.name + '_submitQuerryResult').innerHTML = response;
        }
      });
    }
    
  </script>

</head>
<body class="standard-flex-display">

  <header>
    <h1>Test des Services</h1>
  </header>

  <form id="formTest">
    <div id="servicesTesterPlaceholder"></div>
  </form>

</body>
</html>